-- Sample Dataset 1
create table if not exists city
(
    id int,
    name varchar(17),
    countrycode varchar(3),
    district varchar(20),
    population int
);

insert into city values
(6,'Rotterdam','NLD','Zuid-Holland',593321),
(3878,'Scottsdale','USA','Arizona',202705),
(3965,'Corona','USA','California',124966),
(3973,'Concord','USA','California',121780),
(3977,'Cedar Rapids','USA','Iowa',120758),
(3982,'Coral Springs','USA','Florida',117549),
(4054,'Fairfield','USA','California',92256),
(4058,'Boulder','USA','Colorado',91238),
(4061,'Fall River','USA','Massachusetts',90555);

select * from city;

#Q1
select * from city
where countrycode = 'USA' and population > 100000;

#Q2
select name from city
where countrycode = 'USA' and population > 120000;

#Q3
select * from city;

#Q4
select * from city
where id = 1661;

#Q5
SELECT * from city
where countrycode = 'JPN';

#Q6
SELECT * from city
where countrycode = 'JPN';

--Sample Dataset 2
create table station
(
    id int,
    city varchar(21),
    state varchar(2),
    lat_n int,
    long_w int
);

insert into station VALUES
(794,'Kissee Mills','MO',139,73),
(824,'Loma Mar','CA',48,130),
(603,'Sandy Hook','CT',72,148),
(478,'Tipton','IN',33,97),
(619,'Arlington','CO',75,92),
(711,'Turner','AR',50,101),
(839,'Slidell','LA',85,151),
(411,'Negreet','LA',98,105),
(588,'Glencoe','KY',46,136),
(665,'Chelsea','IA',98,59),
(342,'Chignik Lagoon','AK',103,153),
(733,'Pelahatchie','MS',38,28),
(441,'Hanna City','IL',50,136),
(811,'Dorrance','KS',102,121),
(698,'Albany','CA',49,80),
(325,'Monument','KS',70,141),
(414,'Manchester','MD',73,37),
(113,'Prescott','IA',39,65),
(971,'Graettinger','IA',94,150),
(266,'Cahone','CO',116,127);

select * from station;

#Q7
select city,state from station;

#Q8
select distinct city from station
where id%2 = 0;

#Q9
select count(city) - count(distinct city) as diff from station;

#Q10
--shortest city name
select tmp.city,tmp.city_length 
from (select city,
length(city) as city_length,
row_number() over (order by length(city),city) as row_num
from station)tmp
where tmp.row_num = 1;

--largest city name
select tmp.city,tmp.city_length 
from (select city,
length(city) as city_length,
row_number() over (order by length(city) desc,city) as row_num
from station)tmp
where tmp.row_num = 1;

#Q11
select city from station
where city regexp '^[a,e,i,o,u]'; -- regexp = rlike

#Q12
select city from station
where city regexp '[a,e,i,o,u]$';

#Q13
select city from station
where city regexp '^[^a,e,i,o,u]';

#Q14
select city from station
where city regexp '[^a,e,i,o,u]$';

#Q15
select city from station
where city REGEXP ?

#Q16
select city from station
where city REGEXP '^[^a,e,o,i,u]+[a-z]+[^a,e,o,i,u]$'

create database sqlset1;
use sqlset1;

#Q17
create table product
(
    product_id int primary key,
    product_name varchar(20),
    unit_price int
);

desc product;

create table sales
(
    seller_id int,
    product_id int,
    buyer_id int,
    sale_date date,
    quantity int,
    price int,
    foreign key(product_id) references product(product_id)
);

desc sales;

insert into product values
(1,'S8',1000),
(2,'G4',800),
(3,'iPhone',1400);

select * from product;

insert into sales VALUES
(1,1,1,'2019-01-21',2,2000),
(1,2,2,'2019-02-17',1,800),
(2,2,3,'2019-06-02',1,800),
(3,3,4,'2019-05-13',2,2800);

select product_id, product_name
from product
where product_id not in (select product_id from sales where sale_date not between '2019-01-01' and '2019-03-31');

#Q18
create table views
(
    article_id int,
    author_id int,
    viewer_id int,
    view_date date
);

insert into views VALUES
(1,3,5,'2019-08-01'),
(1,3,6,'2019-08-02'),
(2,7,7,'2019-08-01'),
(2,7,6,'2019-08-02'),
(4,7,1,'2019-07-22'),
(3,4,4,'2019-07-21'),
(3,4,4,'2019-07-21');

select * from views;

select distinct author_id from views
where author_id in (select distinct viewer_id from views)
order by author_id;

--Alternative solution
select distinct A.author_id
from views A
inner join views B on A.author_id = B.viewer_id
order by A.author_id

#Q19
create table delivery
(
    delivery_id int primary key,
    customer_id int,
    order_date date,
    customer_pref_delivery_date date
);

desc delivery;

insert into delivery VALUES
(1,1,'2019-08-01','2019-08-02'),
(2,5,'2019-08-02','2019-08-02'),
(3,1,'2019-08-11','2019-08-11'),
(4,3,'2019-08-24','2019-08-26'),
(5,4,'2019-08-21','2019-08-22'),
(6,2,'2019-08-11','2019-08-13');


select round(sum(tmp.immediate_count_flag)/count(tmp.delivery_id) * 100,2) as immediate_percentage
from
(select delivery_id,
(case when order_date = customer_pref_delivery_date then 1 else 0 end) as immediate_count_flag
from delivery)tmp;

#Q20
create table Ads
(
    ad_id int,
    user_id int,
    action enum('Clicked','Viewed','Ignored'),
    primary key(ad_id,user_id) 
);

desc Ads;

insert into Ads VALUES
(1,1,'Clicked'),
(2,2,'Clicked'),
(3,3,'Viewed'),
(5,5,'Ignored'),
(1,7,'Ignored'),
(2,7,'Viewed'),
(3,5,'Clicked'),
(1,4,'Viewed'),
(2,11,'Viewed'),
(1,2,'Clicked');

select ad_id,
if((clicked_count + viewed_count) = 0,0,round((clicked_count * 100)/(clicked_count + viewed_count),2)) as ctr
from
(select ad_id,
sum(case when action = 'Clicked' then 1 else 0 end) as clicked_count,
sum(case when action = 'Viewed' then 1 else 0 end) as viewed_count
from Ads
group by ad_id)tmp
order by ctr desc,ad_id;

#Q21
create table employee
(
    employee_id int,
    team_id int,
    primary key(employee_id)
);
desc employee;

insert into employee VALUES
(1,8),
(2,8),
(3,8),
(4,7),
(5,9),
(6,9);

select employee_id,team_size
from employee E
inner join
(select team_id,count(*) as team_size
from employee
group by team_id)tmp on E.team_id = tmp.team_id;

#Q22
CREATE table countries
(
    country_id int primary key,
    country_name varchar(20)
);

create table weather
(
    country_id int,
    weather_state int,
    day date,
    PRIMARY KEY(country_id,day)
);

desc weather;

insert into countries VALUES
(2,'USA'),
(3,'Australia'),
(7,'Peru'),
(5,'China'),
(8,'Morocco'),
(9,'Spain');

select * from countries;

insert into weather VALUES
(2,15,'2019-11-01'),
(2,12,'2019-10-28'),
(2,12,'2019-10-27'),
(3,-2,'2019-11-10'),
(3,0,'2019-11-11'),
(3,3,'2019-11-12'),
(5,16,'2019-11-07'),
(5,18,'2019-11-09'),
(5,21,'2019-11-23'),
(7,25,'2019-11-28'),
(7,22,'2019-12-01'),
(7,20,'2019-12-02'),
(8,25,'2019-11-05'),
(8,27,'2019-11-15'),
(8,31,'2019-11-25'),
(9,7,'2019-10-23'),
(9,3,'2019-12-23');

select tmp.country_name,
if(avg_weather_state <= 15,'Cold',if(avg_weather_state >= 25,'Hot','Warm')) as weather_type
from
(select C.country_name,avg(W.weather_state) as avg_weather_state
from countries C
inner join weather W on C.country_id = W.country_id
where date_format(W.day,'%Y%m') = 201911
group by C.country_id)tmp;

#Q23
create table prices
(
    product_id int,
    start_date date,
    end_date date,
    price int,
    primary key (product_id,start_date,end_date)
);

desc prices;

create table UnitsSold
(
    product_id int,
    purchase_date date,
    units int
);

insert into prices VALUES
(1,'2019-02-17','2019-02-28',5),
(1,'2019-03-01','2019-03-22',20),
(2,'2019-02-01','2019-02-20',15),
(2,'2019-02-21','2019-03-31',30);

insert into UnitsSold VALUES
(1,'2019-02-25',100),
(1,'2019-03-01',15),
(2,'2019-02-10',200),
(2,'2019-03-22',30);

select tmp.product_id,
round(sum(total_price)/sum(units),2) as average_price
from
(select P.product_id,P.price,U.units,
(P.price * U.units) as total_price
from prices P
inner join UnitsSold U on P.product_id = U.product_id
where U.purchase_date between P.start_date and P.end_date)tmp
group by tmp.product_id;

#Q24
create table activity
(
    player_id int,
    device_id int,
    event_date date,
    games_played int,
    primary key(player_id, event_date)
);

insert into activity values
(1,2,'2016-03-01',5),
(1,2,'2016-05-02',6),
(2,3,'2017-06-25',1),
(3,1,'2016-03-02',0),
(3,4,'2018-07-03',5);

select player_id,event_date
FROM
(select player_id,event_date,
row_number() over (partition by player_id order by event_date) as row_num
from activity)tmp
where tmp.row_num = 1;

#Q25
select player_id,device_id
FROM
(select player_id,device_id,
row_number() over (partition by player_id order by event_date) as row_num
from activity)tmp
where tmp.row_num = 1;

#Q26
create table products
(
    product_id int primary key,
    product_name varchar(50),
    product_category varchar(10)
);

create table orders
(
    product_id int,
    order_date date,
    unit int
);

insert into products values
(1,'Leetcode Solutions','Book'),
(2,'Jewels of Stringology','Book'),
(3,'HP','Laptop'),
(4,'Lenovo','Laptop'),
(5,'Leetcode Kit','T-shirt');

insert into orders VALUES
(1,'2020-02-05',60),
(1,'2020-02-10',70),
(2,'2020-01-18',30),
(2,'2020-02-11',80),
(3,'2020-02-17',2),
(3,'2020-02-24',3),
(4,'2020-03-01',20),
(4,'2020-03-04',30),
(4,'2020-03-04',60),
(5,'2020-02-25',50),
(5,'2020-02-27',50),
(5,'2020-03-01',50);

select P.product_name,sum(O.unit) as sum_unit
from products P
inner join orders O on P.product_id = O.product_id
where date_format(O.order_date,'%Y%m') = 202002
group by P.product_id
having sum(O.unit) >= 100;

#Q27
create table users
(
    user_id int primary key,
    name varchar(50),
    mail varchar(50)
);

insert into users VALUES
(1,'Winston','winston@leetcode.com'),
(2,'Jonathan','jonathanisgreat'),
(3,'Annabelle','bella-@leetcode.com'),
(4,'Sally','sally.come@leetcode.com'),
(5,'Marwan','quarz#2020@leetcode.com'),
(6,'David','david69@gmail.com'),
(7,'Shapiro','.shapo@leetcode.com');

select * from users
where mail regexp '^[a-zA-Z]+[a-zA-Z0-9_.-]+@leetcode.com$';


